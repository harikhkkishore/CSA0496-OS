#include <stdio.h>
#define MAX_PROCESSES 5
#define MAX_RESOURCES 3
int available[MAX_RESOURCES];
int maximum[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
int work[MAX_RESOURCES];
int finish[MAX_PROCESSES];
void initialize() 
{
    printf("Enter the available resources for each type:\n");
    for (int i = 0; i < MAX_RESOURCES; i++) {
        scanf("%d", &available[i]);
    }
    printf("Enter the maximum resources needed for each process:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        printf("For Process %d: ", i + 1);
        for (int j = 0; j < MAX_RESOURCES; j++) {
            scanf("%d", &maximum[i][j]);
            need[i][j] = maximum[i][j];
        }
    }
    for (int i = 0; i < MAX_PROCESSES; i++) {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            allocation[i][j] = 0;
        }
        finish[i] = 0;
    }
}
int request_resources(int process_id, int request[]) {
    for (int i = 0; i < MAX_RESOURCES; i++) {
        if (request[i] > need[process_id][i] || request[i] > available[i]) {
            return 0; 
        }
    }
    for (int i = 0; i < MAX_RESOURCES; i++) {
        available[i] -= request[i];
        allocation[process_id][i] += request[i];
        need[process_id][i] -= request[i];
    }
    for (int i = 0; i < MAX_RESOURCES; i++) {
        work[i] = available[i];
    }
    int finish_copy[MAX_PROCESSES];
    for (int i = 0; i < MAX_PROCESSES; i++) {
        finish_copy[i] = finish[i];
    }
    int safe = 0;
    for (int i = 0; i < MAX_PROCESSES; i++) {
        if (finish_copy[i] == 0) {
            int j;
            for (j = 0; j < MAX_RESOURCES; j++) {
                if (need[i][j] > work[j]) {
                    break;
                }
            }
            if (j == MAX_RESOURCES) {
                for (int k = 0; k < MAX_RESOURCES; k++) {
                    work[k] += allocation[i][k];
                }
                finish_copy[i] = 1;
                safe = 1;
            }
        }
    }
    if (!safe) {
        for (int i = 0; i < MAX_RESOURCES; i++) {
            available[i] += request[i];
            allocation[process_id][i] -= request[i];
            need[process_id][i] += request[i];
        }
        return 0; 
    }
    for (int i = 0; i < MAX_RESOURCES; i++) {
        finish[process_id] = 1;
    }
    return 1;
}
int main() {
    initialize();
    int process_id;
    int request[MAX_RESOURCES];
    printf("Enter the process ID making the request: ");
    scanf("%d", &process_id);
    printf("Enter the resource request for Process %d:\n", process_id);
    for (int i = 0; i < MAX_RESOURCES; i++) {
        scanf("%d", &request[i]);
    }
    if (request_resources(process_id - 1, request)) {
        printf("Request granted. New state:\n");
    } else {
        printf("Request denied. System in an unsafe state.\n");
    }

    return 0;
}
