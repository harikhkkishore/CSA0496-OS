#include<stdio.h>
struct Process {
    int id;          
    int arrivalTime; 
    int burstTime;   
    int waitingTime; 
    int turnaroundTime; 
    int completed;   
};
void sjf(struct Process processes[], int n) {
    int currentTime = 0; // Current time
    int totalTurnaroundTime = 0;
    int totalWaitingTime = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
    for (int i = 0; i < n; i++) {
        int shortest = -1;
        for (int j = 0; j < n; j++) {
            if (!processes[j].completed && processes[j].arrivalTime <= currentTime) {
                if (shortest == -1 || processes[j].burstTime < processes[shortest].burstTime) {
                    shortest = j;
                }
            }
        }
        if (shortest == -1) {
            currentTime++;
        } else {
            processes[shortest].waitingTime = currentTime - processes[shortest].arrivalTime;
            processes[shortest].turnaroundTime = processes[shortest].waitingTime + processes[shortest].burstTime;
            totalWaitingTime += processes[shortest].waitingTime;
            totalTurnaroundTime += processes[shortest].turnaroundTime;
            processes[shortest].completed = 1;
            currentTime += processes[shortest].burstTime;
        }
    }
    float avgWaitingTime = (float)totalWaitingTime / n;
    float avgTurnaroundTime = (float)totalTurnaroundTime / n;

    printf("Average Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
}
int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].completed = 0;
    }
    sjf(processes, n);

    return 0;
}
