#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>
int main() {
    int fileDescriptor = open("example.txt", O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
    if (fileDescriptor == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }
    const char *data = "Hello, this is a demonstration of UNIX I/O system calls.";
    ssize_t bytesWritten = write(fileDescriptor, data, strlen(data));
    if (bytesWritten == -1) {
        perror("Error writing to file");
        close(fileDescriptor);
        exit(EXIT_FAILURE);
    }
    printf("Data written to the file successfully.\n");
    off_t offset = lseek(fileDescriptor, 0, SEEK_SET);
    if (offset == -1) {
        perror("Error seeking in file");
        close(fileDescriptor);
        exit(EXIT_FAILURE);
    }

    printf("File pointer moved to the beginning.\n");
    char buffer[100];
    ssize_t bytesRead = read(fileDescriptor, buffer, sizeof(buffer));
    if (bytesRead == -1) {
        perror("Error reading from file");
        close(fileDescriptor);
        exit(EXIT_FAILURE);
    }
    buffer[bytesRead] = '\0'; 
    printf("Data read from the file:\n%s\n", buffer);
    close(fileDescriptor);
    struct stat fileStat;
    if (stat("example.txt", &fileStat) == -1) {
        perror("Error getting file information");
        exit(EXIT_FAILURE);
    }
    printf("File information:\n");
    printf("Size: %ld bytes\n", (long)fileStat.st_size);
    printf("Inode number: %ld\n", (long)fileStat.st_ino);
    printf("Mode: %o\n", fileStat.st_mode);
    DIR *dir = opendir(".");
    if (dir == NULL) {
        perror("Error opening directory");
        exit(EXIT_FAILURE);
    }
    printf("\nContents of the current directory:\n");
    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }
    closedir(dir);
    return 0;
}
