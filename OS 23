#include <stdio.h>
struct MemoryBlock {
    int size;
    int allocated; 
};
void initializeMemory(struct MemoryBlock memory[], int totalBlocks);
void displayMemory(struct MemoryBlock memory[], int totalBlocks);
int allocateMemory(struct MemoryBlock memory[], int totalBlocks, int processSize);
int deallocateMemory(struct MemoryBlock memory[], int totalBlocks, int processID);

int main() {
    const int totalBlocks = 10;
    struct MemoryBlock memory[totalBlocks];
    initializeMemory(memory, totalBlocks);
    int process1Size = 4;
    int process2Size = 2;

    int process1ID = allocateMemory(memory, totalBlocks, process1Size);
    int process2ID = allocateMemory(memory, totalBlocks, process2Size);
    printf("Memory after allocation:\n");
    displayMemory(memory, totalBlocks);
    deallocateMemory(memory, totalBlocks, process1ID);
    printf("\nMemory after deallocation:\n");
    displayMemory(memory, totalBlocks);

    return 0;
}
void initializeMemory(struct MemoryBlock memory[], int totalBlocks) {
    for (int i = 0; i < totalBlocks; i++) {
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}
void displayMemory(struct MemoryBlock memory[], int totalBlocks) {
    printf("Memory Status:\n");
    for (int i = 0; i < totalBlocks; i++) {
        printf("Block %d - Size: %d, Allocated: %s\n", i + 1, memory[i].size,
               (memory[i].allocated == 1) ? "Yes" : "No");
    }
    printf("\n");
}
int allocateMemory(struct MemoryBlock memory[], int totalBlocks, int processSize) {
    for (int i = 0; i < totalBlocks; i++) {
        if (memory[i].allocated == 0 && memory[i].size >= processSize) {
            memory[i].allocated = 1;
            return i + 1; 
        }
    }
    printf("Memory allocation failed for process of size %d.\n", processSize);
    return -1;
}
int deallocateMemory(struct MemoryBlock memory[], int totalBlocks, int processID) {
    if (processID >= 1 && processID <= totalBlocks && memory[processID - 1].allocated == 1) {
        memory[processID - 1].allocated = 0;
        printf("Memory deallocated for process %d.\n", processID);
        return 1; 
    } else {
        printf("Invalid process ID for deallocation.\n");
        return 0; 
    }
}
